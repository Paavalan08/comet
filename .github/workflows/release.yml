name: Release

on:
  push:
    branches:
      - release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm install

      - name: Build Electron app
        run: |
          npm run make -- --arch=${{ matrix.arch }}
        env:
          ELECTRON_CACHE: ${{ runner.temp }}/electron
          npm_config_arch: ${{ matrix.arch }}
          npm_config_platform: ${{ matrix.os }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-distributables
          path: out/make  # Adjust the path to where your distributables are stored

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Extract version from package.json
        id: version
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-distributables

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const tagName = `v${process.env.VERSION}`;
            let release = releases.find(release => release.tag_name === tagName);
            if (!release) {
              release = await github.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release v${process.env.VERSION}`,
                draft: true,
                prerelease: true
              });
            }
            return { release_id: release.id, upload_url: release.upload_url };

      - name: Upload to GitHub Release
        run: |
          for file in all-distributables/**/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to GitHub release"
              gh release upload ${{ steps.create_release.outputs.release_id }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
