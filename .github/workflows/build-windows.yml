name: Build Windows

on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install Microsoft Build Tools
      run: |
        choco install microsoft-build-tools -y
      shell: pwsh

    - name: Generate Dev Certificate, Install Dependencies, and Build App
      run: |
        # Verify makeappx.exe
        $makeappxPath = 'C:\Program Files (x86)\Windows Kits\10\App Certification Kit\makeappx.exe'
        if (Test-Path $makeappxPath) {
            echo "makeappx.exe found at $makeappxPath"
            $env:WINDOWS_KIT_PATH="C:\Program Files (x86)\Windows Kits\10\App Certification Kit"
        } else {
            Write-Error "makeappx.exe not found."
            exit 1
        }

        # Generate Dev Certificate
        $certPassword = [guid]::NewGuid().ToString()
        $certPath = "$(Get-Location)\devcert.pfx"
        $cert = New-SelfSignedCertificate -DnsName "CN=DevCert" -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(1)
        Export-PfxCertificate -Cert $cert -FilePath $certPath -Password (ConvertTo-SecureString -String $certPassword -Force -AsPlainText)
        echo "Generated CERT_PATH: $certPath"
        echo "Generated CERT_PASSWORD: $certPassword"

        # Install dependencies
        npm install

        # Build app and Sign using signtool.exe
        $env:CERT_PATH=$certPath
        $env:CERT_PASSWORD=$certPassword
        npm run make || exit 1

        # Explicitly Sign the appx package using the generated certificate
        $appxPath = Get-ChildItem -Path out\make\*.appx | Select-Object -First 1 -ExpandProperty FullName
        if ($appxPath) {
            & $env:WINDOWS_KIT_PATH\signtool.exe sign /f $env:CERT_PATH /p $env:CERT_PASSWORD /fd SHA256 /a $appxPath
        } else {
            Write-Error "No appx package found to sign."
            exit 1
        }
      env:
        CERT_PATH: ${{ env.CERT_PATH }}
        CERT_PASSWORD: ${{ env.CERT_PASSWORD }}
      shell: pwsh
